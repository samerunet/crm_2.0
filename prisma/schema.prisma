// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  engineType = "dataproxy"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  image         String?
  passwordHash  String?              // <-- NEW
  role          String   @default("USER")
  accounts      Account[]
  sessions      Session[]
  enrollments   Enrollment[]
  orders        Order[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  provider          String
  providerAccountId String
  type              String
  access_token      String?
  refresh_token     String?
  expires_at        Int?
  token_type        String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user User    @relation(fields: [userId], references: [id])
}

model Course {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  description String
  priceCents  Int      @default(0)
  published   Boolean  @default(false)
  enrollments Enrollment[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Guide {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  description String
  priceCents  Int      @default(0)
  published   Boolean  @default(false)
  orders      Order[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

model Order {
  id           String   @id @default(cuid())
  userId       String?
  guideId      String?
  amountCents  Int
  currency     String   @default("usd")
  status       String   @default("PENDING")
  externalRef  String?
  createdAt    DateTime @default(now())

  user  User?  @relation(fields: [userId], references: [id])
  guide Guide? @relation(fields: [guideId], references: [id])
}

model Lead {
  id          String   @id @default(cuid())
  name        String?
  email       String
  phone       String?
  eventDate   DateTime?
  message     String?
  source      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
